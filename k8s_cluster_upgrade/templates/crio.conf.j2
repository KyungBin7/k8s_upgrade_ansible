# CRI-O Configuration File for Kubernetes
# Generated by Ansible

[crio]
# Path to the "root directory". CRIO stores all of its data, including
# container images, in this directory.
root = "/var/lib/containers/storage"

# Path to the "run directory". CRIO stores all of its state in this directory.
runroot = "/var/run/containers/storage"

# Storage driver used to manage the storage of images and containers.
storage_driver = "overlay"

# List to pass options to the storage driver.
storage_option = [
  "overlay.mountopt=nodev,metacopy=on",
]

# If set to false, in-memory locking will be used instead of file-based locking.
file_locking = false

# Path to the lock file.
# file_locking_path = "/run/crio.lock"

[crio.api]
# Path to AF_LOCAL socket on which crio will listen.
listen = "/var/run/crio/crio.sock"

# IP address on which the stream server will listen.
stream_address = "127.0.0.1"

# The port on which the stream server will listen.
stream_port = "0"

# Enable encrypted TLS transport of the stream server.
stream_enable_tls = false

# Path to the x509 certificate file used to serve the encrypted stream.
stream_tls_cert = ""

# Path to the x509 private key file used to serve the encrypted stream.
stream_tls_key = ""

# Path to the x509 CA(s) file used to verify and authenticate client
# communication with the encrypted stream.
stream_tls_ca = ""

# Maximum grpc send message size in bytes.
grpc_max_send_msg_size = 16777216

# Maximum grpc receive message size in bytes.
grpc_max_recv_msg_size = 16777216

[crio.runtime]
# A list of ulimits to be set in containers by default, specified as
# "<ulimit name>=<soft limit>:<hard limit>", for example:
# "nofile=1024:2048"
default_ulimits = [
  "nofile=1048576:1048576",
]

# If true, the runtime will not use pivot_root, but instead use MS_MOVE.
no_pivot = false

# Path to the conmon binary, used for monitoring the OCI runtime.
conmon = "/usr/bin/conmon"

# Cgroup setting for conmon
conmon_cgroup = "pod"

# Environment variable list for the conmon process.
conmon_env = [
  "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
]

# Additional environment variables to set for all the
# containers. These are overridden if set in the
# container image spec or in the container runtime configuration.
default_env = [
]

# If true, SELinux will be used for pod separation on the host.
selinux = {{ 'true' if ansible_selinux.status == 'enabled' else 'false' }}

# Path to the seccomp.json profile which is used as the default seccomp profile
# for the runtime. If not specified, then the internal default seccomp profile
# will be used.
seccomp_profile = ""

# Used to change the name of the default AppArmor profile of crio. The default
# profile name is "crio-default".
apparmor_profile = "crio-default"

# Cgroup management implementation used for the runtime.
cgroup_manager = "systemd"

# List of default capabilities for containers.
default_capabilities = [
  "CHOWN",
  "DAC_OVERRIDE",
  "FSETID",
  "FOWNER",
  "SETGID",
  "SETUID",
  "SETPCAP",
  "NET_BIND_SERVICE",
  "KILL",
]

# List of default sysctls.
default_sysctls = [
]

# List of additional devices.
additional_devices = [
]

# Path to OCI hooks directories for automatically executed hooks.
hooks_dir = [
  "/usr/share/containers/oci/hooks.d",
]

# List of default mounts for each container.
default_mounts = [
]

# Maximum number of processes allowed in a container.
pids_limit = 1024

# Maximum sized allowed for the container log file.
log_size_max = -1

# Whether container output should be logged to journald in addition
# to the kubenetes log file
log_to_journald = false

# Path to directory in which container exit files are written to by conmon.
container_exits_dir = "/var/run/crio/exits"

# Path to directory for container attach sockets.
container_attach_socket_dir = "/var/run/crio"

# The prefix to use for the source of the bind mounts.
bind_mount_prefix = ""

# If set to true, all containers will run in read-only mode.
read_only = false

# Changes the verbosity of the logs based on the level it is set to.
log_level = "info"

# Filter the log messages by the provided regular expression.
log_filter = ""

# The UID mappings for the user namespace of each container.
uid_mappings = ""

# The GID mappings for the user namespace of each container.
gid_mappings = ""

# The minimal amount of time in seconds to wait before issuing a timeout
# regarding the proper termination of the container.
ctr_stop_timeout = 30

# The "runtime" table defines runtimes for OCI compatible containers.
[crio.runtime.runtimes.runc]
runtime_path = "/usr/bin/runc"
runtime_type = "oci"
runtime_root = "/run/runc"

# Crio.image contains settings pertaining to the management of OCI images.
[crio.image]
# Default transport for pulling images from a remote container storage.
default_transport = "docker://"

# The path to a directory containing global registry configuration files.
global_auth_file = ""

# The image used to instantiate infra containers.
pause_image = "k8s.gcr.io/pause:3.6"

# If not empty, the path to a docker/config.json-like file containing credentials
# necessary for pulling the image specified by pause_image above.
pause_image_auth_file = ""

# The command to run to have a container stay in the paused state.
pause_command = "/pause"

# Path to the file which decides what sort of policy we use when deciding
# whether or not to trust an image that we've pulled.
signature_policy = ""

# List of registries to skip TLS verification for pulling images.
insecure_registries = [
]

# Controls how image volumes are handled.
image_volumes = "mkdir"

# List of registries to be used when pulling an unqualified image.
registries = [
  "docker.io",
]

[crio.network]
# The default CNI network name to be selected. If not set or "", then
# crio will pick-up the first one found in network_dir.
cni_default_network = ""

# Path to the directory where CNI configuration files are located.
network_dir = "/etc/cni/net.d/"

# Paths to directories where CNI plugin binaries are located.
plugin_dirs = [
  "/opt/cni/bin/",
]

# A necessary configuration for Prometheus based metrics retrieval
[crio.metrics]
# Globally enable or disable metrics support.
enable_metrics = true

# The port on which the metrics server will listen.
metrics_port = 9090

# Local socket path to bind the metrics server to
metrics_socket = "" 