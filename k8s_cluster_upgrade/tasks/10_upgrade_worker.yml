---
# 워커 노드 업그레이드

- name: "워커 노드 업그레이드 시작"
  debug:
    msg: "워커 노드 업그레이드를 시작합니다."

- name: "업그레이드 스킵 확인"
  debug:
    msg: "버전이 동일하여 업그레이드를 건너뜁니다."
  when: k8s_skip_upgrade

# kubeadm 업그레이드
- name: "kubeadm 업그레이드 (패키지 방식)"
  include_tasks: 20_install_packages.yml
  vars:
    k8s_packages_to_install:
      - "kubeadm={{ k8s_target_version | regex_replace('^v', '') }}-*"
  when: 
    - not k8s_skip_upgrade
    - k8s_detected_package_manager in ['yum', 'apt']
    - k8s_enable_kubeadm

- name: "kubeadm 업그레이드 (바이너리 방식)"
  include_tasks: 21_install_binaries.yml
  vars:
    k8s_binaries_to_install:
      - kubeadm
  when: 
    - not k8s_skip_upgrade
    - k8s_detected_package_manager == 'binary'
    - k8s_enable_kubeadm

# 컨트롤 플레인 업그레이드 완료 대기
- name: "컨트롤 플레인 업그레이드 완료 대기"
  wait_for:
    timeout: 600
  delegate_to: localhost
  run_once: true
  when: not k8s_skip_upgrade

- name: "클러스터 API 서버 응답 확인"
  uri:
    url: "https://{{ hostvars[groups['k8s_masters'][0]]['ansible_default_ipv4']['address'] }}:6443/healthz"
    method: GET
    validate_certs: no
    status_code: 200
  register: api_health_check
  until: api_health_check.status == 200
  retries: 30
  delay: 10
  when: not k8s_skip_upgrade

# 노드 드레인 (마스터 노드에서 실행)
- name: "워커 노드 드레인 수행"
  command: "kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-emptydir-data --force --timeout={{ k8s_upgrade_drain_timeout }}s"
  register: drain_result
  when: 
    - not k8s_skip_upgrade
    - not k8s_upgrade_skip_drain
  ignore_errors: true
  delegate_to: "{{ groups['k8s_masters'][0] }}"

- name: "워커 노드 드레인 결과"
  debug:
    msg: "워커 노드 드레인 {{ '성공' if drain_result.rc == 0 else '실패' }}"
  when: 
    - not k8s_skip_upgrade
    - not k8s_upgrade_skip_drain
    - drain_result is defined

# kubeadm 워커 노드 업그레이드 (kubeadm 사용하는 경우)
- name: "kubeadm 워커 노드 업그레이드"
  command: "kubeadm upgrade node"
  register: upgrade_worker_result
  when: 
    - not k8s_skip_upgrade
    - k8s_enable_kubeadm
  async: "{{ k8s_upgrade_timeout }}"
  poll: 30

- name: "kubeadm 워커 노드 업그레이드 결과"
  debug:
    msg: "kubeadm 워커 노드 업그레이드 {{ '성공' if upgrade_worker_result.rc == 0 else '실패' }}"
  when: 
    - not k8s_skip_upgrade
    - k8s_enable_kubeadm
    - upgrade_worker_result is defined

# kubelet 및 kubectl 업그레이드
- name: "kubelet 및 kubectl 업그레이드 (패키지 방식)"
  include_tasks: 20_install_packages.yml
  vars:
    k8s_packages_to_install:
      - "kubelet={{ k8s_target_version | regex_replace('^v', '') }}-*"
      - "kubectl={{ k8s_target_version | regex_replace('^v', '') }}-*"
  when: 
    - not k8s_skip_upgrade
    - k8s_detected_package_manager in ['yum', 'apt']

- name: "kubelet 및 kubectl 업그레이드 (바이너리 방식)"
  include_tasks: 21_install_binaries.yml
  vars:
    k8s_binaries_to_install:
      - kubelet
      - kubectl
  when: 
    - not k8s_skip_upgrade
    - k8s_detected_package_manager == 'binary'

# kubelet 구성 업데이트 (kubeadm 사용하지 않는 경우)
- name: "kubelet 구성 파일 업데이트"
  template:
    src: kubelet-config.yaml.j2
    dest: /var/lib/kubelet/config.yaml
    backup: yes
  when: 
    - not k8s_skip_upgrade
    - not k8s_enable_kubeadm
  notify:
    - restart kubelet

# kubelet 서비스 재시작
- name: "systemd 데몬 리로드"
  systemd:
    daemon_reload: yes
  when: not k8s_skip_upgrade

- name: "kubelet 서비스 재시작"
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
  when: not k8s_skip_upgrade

# 워커 노드 언코든
- name: "워커 노드 언코든 수행"
  command: "kubectl uncordon {{ inventory_hostname }}"
  register: uncordon_result
  when: 
    - not k8s_skip_upgrade
    - not k8s_upgrade_skip_cordon
    - not k8s_upgrade_skip_drain
  ignore_errors: true
  delegate_to: "{{ groups['k8s_masters'][0] }}"

- name: "워커 노드 언코든 결과"
  debug:
    msg: "워커 노드 언코든 {{ '성공' if uncordon_result.rc == 0 else '실패' }}"
  when: 
    - not k8s_skip_upgrade
    - not k8s_upgrade_skip_cordon
    - uncordon_result is defined

# 업그레이드 검증
- name: "워커 노드 상태 확인"
  command: kubectl get nodes {{ inventory_hostname }}
  register: worker_node_status
  until: "'Ready' in worker_node_status.stdout"
  retries: "{{ k8s_health_check_retries }}"
  delay: "{{ k8s_health_check_delay }}"
  when: not k8s_skip_upgrade
  delegate_to: "{{ groups['k8s_masters'][0] }}"

- name: "워커 노드에서 파드 실행 확인"
  shell: kubectl get pods --all-namespaces --field-selector spec.nodeName={{ inventory_hostname }} | grep -v Terminating | wc -l
  register: worker_pods_count
  when: not k8s_skip_upgrade
  delegate_to: "{{ groups['k8s_masters'][0] }}"

- name: "업그레이드된 kubelet 버전 확인"
  command: kubelet --version
  register: upgraded_kubelet_version
  when: not k8s_skip_upgrade

- name: "워커 노드 업그레이드 결과 표시"
  debug:
    msg:
      - "=== 워커 노드 업그레이드 완료 ==="
      - "노드명: {{ inventory_hostname }}"
      - "kubelet 버전: {{ upgraded_kubelet_version.stdout }}"
      - "실행 중인 파드 수: {{ worker_pods_count.stdout }}"
  when: 
    - not k8s_skip_upgrade
    - upgraded_kubelet_version is defined

- name: "워커 노드 업그레이드 완료"
  debug:
    msg: "워커 노드 업그레이드가 완료되었습니다." 