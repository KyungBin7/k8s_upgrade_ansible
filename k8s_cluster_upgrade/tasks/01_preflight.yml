---
# 사전 검사 태스크

- name: "시스템 정보 수집"
  setup:
    gather_subset:
      - "!all"
      - "!any"
      - "network"
      - "hardware"
      - "virtual"
      - "facter"
      - "ohai"

- name: "OS 호환성 검사"
  debug:
    msg: "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"

- name: "최소 요구사항 검사 - 메모리"
  fail:
    msg: "메모리가 부족합니다. 최소 2GB 필요, 현재: {{ ansible_memtotal_mb }}MB"
  when: ansible_memtotal_mb < 2048

- name: "최소 요구사항 검사 - 디스크 공간"
  shell: df -h / | tail -1 | awk '{print $4}' | sed 's/G//'
  register: available_disk_space
  changed_when: false
  when: not ansible_check_mode

- name: "디스크 공간 검증 (check 모드에서는 건너뜀)"
  debug:
    msg: "Check 모드에서는 디스크 공간 검증을 건너뜁니다."
  when: ansible_check_mode

- name: "디스크 공간 검증"
  fail:
    msg: "디스크 공간이 부족합니다. 최소 10GB 필요, 현재: {{ available_disk_space.stdout }}GB"
  when: 
    - not ansible_check_mode
    - available_disk_space.stdout is defined
    - (available_disk_space.stdout | int) < 10

- name: "필수 명령어 존재 확인"
  command: "which {{ item }}"
  register: command_check
  failed_when: command_check.rc != 0
  changed_when: false
  loop:
    - systemctl
    - curl
    - tar
    - gzip

- name: "Kubernetes 바이너리 존재 확인"
  stat:
    path: "{{ k8s_bin_dir }}/{{ item }}"
  register: k8s_binary_stat
  loop:
    - kubectl
    - kubelet
    - kubeadm
  when: k8s_enable_kubeadm

- name: "Kubernetes 바이너리 상태 저장"
  set_fact:
    k8s_binaries_exist: "{{ k8s_binary_stat.results | selectattr('stat.exists', 'equalto', true) | list | length == 3 }}"
  when: k8s_enable_kubeadm

- name: "Kubernetes 설정 디렉토리 확인"
  stat:
    path: "{{ k8s_config_dir }}"
  register: k8s_config_stat

- name: "네트워크 연결 확인"
  uri:
    url: "{{ k8s_binary_base_url }}/stable.txt"
    method: GET
    timeout: 10
  register: network_check
  ignore_errors: true

- name: "네트워크 연결 실패 알림"
  debug:
    msg: "경고: Kubernetes 다운로드 서버에 연결할 수 없습니다. 오프라인 모드로 진행합니다."
  when: network_check.failed | default(false)

- name: "방화벽 상태 확인"
  command: systemctl is-active firewalld
  register: firewall_status
  ignore_errors: true
  changed_when: false

- name: "SELinux 상태 확인"
  command: getenforce
  register: selinux_status
  ignore_errors: true
  changed_when: false

- name: "swap 상태 확인"
  command: swapon --show
  register: swap_status
  failed_when: false
  changed_when: false

- name: "swap 사용 경고"
  debug:
    msg: "경고: swap이 활성화되어 있습니다. Kubernetes는 swap을 비활성화할 것을 권장합니다."
  when: swap_status.stdout != ""

- name: "컨테이너 런타임 확인"
  command: "systemctl is-active {{ item }}"
  register: runtime_status
  ignore_errors: true
  changed_when: false
  loop:
    - crio
    - containerd
    - docker

- name: "활성 컨테이너 런타임 저장"
  set_fact:
    k8s_active_runtime: "{{ item.item }}"
  when: item.rc == 0
  loop: "{{ runtime_status.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: "백업 디렉토리 생성"
  file:
    path: "{{ k8s_backup_dir }}"
    state: directory
    mode: '0755'
  when: k8s_backup_enabled

# etcd 클러스터 health 체크 (마스터 노드만)
- name: "etcd 클러스터 멤버 리스트 확인"
  shell: |
    timeout {{ k8s_etcd_health_timeout }} bash -c '
    ETCDCTL_API=3 etcdctl member list \
      --endpoints=https://127.0.0.1:2379 \
      --cacert={{ k8s_config_dir }}/pki/etcd/ca.crt \
      --cert={{ k8s_config_dir }}/pki/etcd/server.crt \
      --key={{ k8s_config_dir }}/pki/etcd/server.key'
  register: etcd_member_list
  when: 
    - k8s_detected_role == "master"
    - k8s_config_dir is defined
  failed_when: false
  changed_when: false

- name: "etcd 클러스터 health 상태 확인"
  shell: |
    timeout {{ k8s_etcd_health_timeout }} bash -c '
    ETCDCTL_API=3 etcdctl endpoint health \
      --endpoints=https://127.0.0.1:2379 \
      --cacert={{ k8s_config_dir }}/pki/etcd/ca.crt \
      --cert={{ k8s_config_dir }}/pki/etcd/server.crt \
      --key={{ k8s_config_dir }}/pki/etcd/server.key'
  register: etcd_health_check
  when: 
    - k8s_detected_role == "master"
    - k8s_config_dir is defined
  failed_when: false
  changed_when: false

- name: "etcd 클러스터 상태 확인"
  shell: |
    timeout {{ k8s_etcd_health_timeout }} bash -c '
    ETCDCTL_API=3 etcdctl endpoint status \
      --endpoints=https://127.0.0.1:2379 \
      --cacert={{ k8s_config_dir }}/pki/etcd/ca.crt \
      --cert={{ k8s_config_dir }}/pki/etcd/server.crt \
      --key={{ k8s_config_dir }}/pki/etcd/server.key \
      --write-out=table'
  register: etcd_status_check
  when: 
    - k8s_detected_role == "master"
    - k8s_config_dir is defined
  failed_when: false
  changed_when: false

- name: "etcd 멤버 리스트 결과"
  debug:
    msg: 
      - "=== etcd 클러스터 멤버 리스트 ==="
      - "{{ etcd_member_list.stdout_lines }}"
  when: 
    - k8s_detected_role == "master"
    - etcd_member_list is defined
    - etcd_member_list.rc == 0

- name: "etcd health 상태 결과"
  debug:
    msg: 
      - "=== etcd 클러스터 Health 상태 ==="
      - "{{ etcd_health_check.stdout_lines }}"
  when: 
    - k8s_detected_role == "master"
    - etcd_health_check is defined
    - etcd_health_check.rc == 0

- name: "etcd 상태 정보 결과"
  debug:
    msg: 
      - "=== etcd 클러스터 상태 정보 ==="
      - "{{ etcd_status_check.stdout_lines }}"
  when: 
    - k8s_detected_role == "master"
    - etcd_status_check is defined
    - etcd_status_check.rc == 0

# etcd health 체크 실패 시 경고
- name: "etcd health 체크 실패 경고"
  debug:
    msg: 
      - "⚠️  경고: etcd health 체크에 실패했습니다!"
      - "etcd 클러스터가 불안정할 수 있습니다."
      - "업그레이드를 진행하기 전에 etcd 상태를 확인하세요."
      - "에러 메시지: {{ etcd_health_check.stderr_lines | default(['N/A']) }}"
  when: 
    - k8s_detected_role == "master"
    - etcd_health_check is defined
    - etcd_health_check.rc != 0

# etcd 연결 실패 시 경고
- name: "etcd 연결 실패 경고"
  debug:
    msg: 
      - "⚠️  경고: etcd에 연결할 수 없습니다!"
      - "etcd 서비스가 실행 중인지 확인하세요."
      - "인증서 경로가 올바른지 확인하세요."
  when: 
    - k8s_detected_role == "master"
    - etcd_member_list is defined
    - etcd_member_list.rc != 0

# 심각한 etcd 문제 시 업그레이드 중단 옵션
- name: "etcd 심각한 문제 발생 시 업그레이드 중단"
  fail:
    msg: 
      - "❌ etcd 클러스터에 심각한 문제가 발생했습니다!"
      - "업그레이드를 진행할 수 없습니다."
      - "etcd 문제를 해결한 후 다시 시도하세요."
  when: 
    - k8s_detected_role == "master"
    - k8s_etcd_health_strict | default(false)
    - etcd_health_check is defined
    - etcd_health_check.rc != 0

- name: "로그 디렉토리 생성"
  file:
    path: "{{ k8s_log_file | dirname }}"
    state: directory
    mode: '0755'

- name: "사전 검사 완료"
  debug:
    msg: "사전 검사가 완료되었습니다." 