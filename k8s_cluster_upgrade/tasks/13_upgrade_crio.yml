---
# CRI-O 컨테이너 런타임 업그레이드

- name: "CRI-O 업그레이드 시작"
  debug:
    msg: "CRI-O 컨테이너 런타임 업그레이드를 시작합니다"

# 초기 변수 설정
- name: "CRI-O 업그레이드 변수 초기화"
  set_fact:
    crio_needs_upgrade: false

# 현재 CRI-O 버전 확인
- name: "현재 CRI-O 버전 확인"
  shell: |
    if command -v crio >/dev/null 2>&1; then
      # crio version 명령어에서 버전 추출 (stdout 또는 stderr 모두 확인)
      version_output=$(crio version 2>&1)
      echo "$version_output" | grep -E "(crio version|RuntimeVersion|Starting CRI-O, version)" | head -1 | sed -E 's/.*version:? ([0-9]+\.[0-9]+\.[0-9]+).*/\1/' | sed 's/^v//'
    else
      echo "not_installed"
    fi
  register: crio_current_version
  changed_when: false

- name: "현재 CRI-O 버전 표시"
  debug:
    msg: "현재 CRI-O 버전: {{ crio_current_version.stdout }}"

# Kubernetes와 CRI-O 버전 호환성 매트릭스
- name: "CRI-O 목표 버전 결정"
  set_fact:
    crio_target_version: "{{ k8s_version_matrix[k8s_target_minor_version].crio_version }}"
    crio_minor_version: "{{ k8s_version_matrix[k8s_target_minor_version].crio_minor_version }}"
    crio_opensuse_available: "{{ k8s_version_matrix[k8s_target_minor_version].opensuse_available | default(false) }}"
  when: 
    - k8s_version_matrix[k8s_target_minor_version].crio_version is defined
    - k8s_version_matrix[k8s_target_minor_version].crio_minor_version is defined

- name: "CRI-O 목표 버전 표시"
  debug:
    msg: "CRI-O 목표 버전: {{ crio_target_version | default('N/A') }}"

# OpenSUSE 저장소에서 실제 사용 가능한 CRI-O 버전 확인
- name: "사용 가능한 CRI-O 패치 버전 목록 정의"
  set_fact:
    crio_patch_versions: ["{{ crio_minor_version }}.6", "{{ crio_minor_version }}.5", "{{ crio_minor_version }}.4", "{{ crio_minor_version }}.3", "{{ crio_minor_version }}.2", "{{ crio_minor_version }}.1"]
  when: 
    - crio_target_version is defined
    - crio_minor_version is defined
    - crio_opensuse_available | default(false)

- name: "OpenSUSE 저장소에서 사용 가능한 CRI-O 버전 확인"
  uri:
    url: "{{ k8s_opensuse_crio_base_url }}/{{ crio_minor_version }}:/{{ item }}/{{ k8s_opensuse_os_version }}/x86_64/"
    method: GET
    status_code: [200, 404]
  register: opensuse_version_check
  loop: "{{ crio_patch_versions }}"
  when: 
    - crio_target_version is defined
    - crio_minor_version is defined
    - crio_opensuse_available | default(false)
    - crio_patch_versions is defined
  ignore_errors: true

- name: "사용 가능한 첫 번째 CRI-O 버전 선택"
  set_fact:
    crio_actual_version: "{{ item.item }}"
    opensuse_crio_repo_url: "{{ k8s_opensuse_crio_base_url }}/{{ crio_minor_version }}:/{{ item.item }}/{{ k8s_opensuse_os_version }}/x86_64/"
  loop: "{{ opensuse_version_check.results }}"
  when: 
    - crio_target_version is defined
    - opensuse_version_check is defined
    - item.status == 200
    - crio_actual_version is not defined
  loop_control:
    label: "{{ item.item }}"

- name: "선택된 CRI-O 버전 디버그"
  debug:
    msg:
      - "시도한 버전들: {{ crio_patch_versions | default([]) }}"
      - "선택된 버전: {{ crio_actual_version | default('없음') }}"
      - "선택된 저장소 URL: {{ opensuse_crio_repo_url | default('N/A') }}"
  when: 
    - crio_target_version is defined
    - crio_minor_version is defined
    - crio_opensuse_available | default(false)

- name: "실제 CRI-O 목표 버전 설정"
  set_fact:
    crio_target_version: "{{ crio_actual_version }}"
  when: 
    - crio_actual_version is defined
    - crio_actual_version != ""

- name: "최종 CRI-O 목표 버전 표시"
  debug:
    msg: 
      - "CRI-O 마이너 버전: {{ crio_minor_version | default('N/A') }}"
      - "실제 사용 가능한 CRI-O 버전: {{ crio_target_version | default('N/A') }}"

# 버전 비교 및 업그레이드 필요 여부 확인
- name: "CRI-O 업그레이드 필요 여부 확인"
  set_fact:
    crio_needs_upgrade: "{{ crio_current_version.stdout != crio_target_version and crio_target_version is defined and crio_target_version != 'N/A' and crio_target_version != '' }}"

- name: "CRI-O 업그레이드 스킵"
  debug:
    msg: "CRI-O 업그레이드가 필요하지 않습니다 (현재: {{ crio_current_version.stdout }}, 목표: {{ crio_target_version | default('N/A') }})"
  when: not crio_needs_upgrade

# CRI-O 저장소 확인 변수 초기화
- name: "CRI-O 저장소 확인 변수 초기화"
  set_fact:
    crio_available_in_repo: false
  when: crio_needs_upgrade

# 공식 K8s addons CRI-O 저장소 URL 구성
- name: "공식 K8s addons CRI-O 저장소 URL 구성"
  set_fact:
    k8s_crio_repo_url: "https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_minor_version }}/rpm/"
    k8s_crio_deb_repo_url: "https://pkgs.k8s.io/addons:/cri-o:/stable:/{{ crio_minor_version }}/deb/"
  when: 
    - crio_needs_upgrade
    - crio_minor_version is defined

- name: "공식 K8s addons CRI-O 저장소 URL 디버그"
  debug:
    msg:
      - "RPM 저장소 URL: {{ k8s_crio_repo_url | default('N/A') }}"
      - "DEB 저장소 URL: {{ k8s_crio_deb_repo_url | default('N/A') }}"
  when: crio_needs_upgrade

# 공식 K8s addons CRI-O 저장소 접근 가능성 확인
- name: "공식 K8s addons CRI-O 저장소 접근 가능성 확인"
  uri:
    url: "{{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url }}"
    method: GET
    status_code: [200, 404]
    timeout: 30
  register: k8s_crio_repo_check
  when: 
    - crio_needs_upgrade
    - k8s_crio_repo_url is defined
  ignore_errors: true

- name: "공식 K8s addons CRI-O 저장소 접근 결과"
  debug:
    msg:
      - "저장소 URL: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url }}"
      - "접근 상태: {{ k8s_crio_repo_check.status | default('접근 실패') }}"
      - "접근 가능: {{ k8s_crio_repo_check.status == 200 }}"
  when: 
    - crio_needs_upgrade
    - k8s_crio_repo_check is defined

# 공식 저장소에서 CRI-O 버전 확인 (RPM 기반) - 쉘 스크립트 방식
- name: "공식 K8s addons CRI-O 저장소 설정 (Rocky/RHEL)"
  shell: |
    echo "=== K8s addons CRI-O 저장소 설정 ==="
    echo "목표 버전: {{ crio_target_version }}"
    echo "저장소 URL: {{ k8s_crio_repo_url }}"
    
    # 저장소 파일 생성
    cat <<EOF > /etc/yum.repos.d/k8s-addons-crio.repo
    [k8s-addons-crio]
    name=Kubernetes addons CRI-O
    baseurl={{ k8s_crio_repo_url }}
    enabled=1
    gpgcheck=1
    gpgkey={{ k8s_crio_repo_url }}repodata/repomd.xml.key
    EOF
    
    echo "저장소 파일이 생성되었습니다"
    cat /etc/yum.repos.d/k8s-addons-crio.repo
    echo "REPO_CONFIGURED"
  register: k8s_crio_repo_add
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'yum'
    - k8s_crio_repo_check is defined
    - k8s_crio_repo_check.status == 200

- name: "공식 K8s addons CRI-O 저장소에서 패키지 확인 (Rocky/RHEL)"
  shell: |
    echo "=== K8s addons CRI-O 저장소에서 패키지 확인 ==="
    echo "목표 버전: {{ crio_target_version }}"
    
    # yum 저장소 캐시 갱신
    yum makecache fast --quiet 2>/dev/null || true
    
    # 1. 정확한 버전 패키지명으로 검색
    result1=$(yum list available "cri-o-{{ crio_target_version }}*" --showduplicates 2>/dev/null || echo "search1_failed")
    echo "검색1 (cri-o-{{ crio_target_version }}*): $result1"
    
    # 2. 일반 cri-o 패키지에서 버전 검색
    result2=$(yum list available cri-o --showduplicates 2>/dev/null || echo "search2_failed")
    echo "검색2 (cri-o --showduplicates): $result2"
    
    # 3. 특정 저장소에서만 검색
    result3=$(yum --disablerepo="*" --enablerepo="k8s-addons-crio" list available cri-o 2>/dev/null || echo "search3_failed")
    echo "검색3 (특정 저장소): $result3"
    
    # 결과 분석
    if echo "$result1" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_SEARCH1"
    elif echo "$result2" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_SEARCH2"
    elif echo "$result3" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_SEARCH3"
    elif echo "$result1$result2$result3" | grep -q "cri-o"; then
      echo "CRI-O_AVAILABLE_BUT_NOT_TARGET_VERSION"
    else
      echo "NOT_AVAILABLE"
    fi
  register: crio_repo_check
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'yum'
    - k8s_crio_repo_add is defined
    - k8s_crio_repo_add.stdout is defined
    - k8s_crio_repo_add.stdout.find('REPO_CONFIGURED') != -1
  changed_when: false

# 공식 저장소에서 CRI-O 버전 확인 (DEB 기반) - 쉘 스크립트 방식
- name: "공식 K8s addons CRI-O 저장소 설정 (Ubuntu/Debian)"
  shell: |
    echo "=== K8s addons CRI-O 저장소 설정 ==="
    echo "목표 버전: {{ crio_target_version }}"
    echo "저장소 URL: {{ k8s_crio_deb_repo_url }}"
    
    # GPG 키 추가
    curl -fsSL "{{ k8s_crio_deb_repo_url }}Release.key" | apt-key add - 2>/dev/null || true
    
    # 저장소 추가
    echo "deb {{ k8s_crio_deb_repo_url }} /" > /etc/apt/sources.list.d/k8s-addons-crio.list
    
    echo "저장소 파일이 생성되었습니다"
    cat /etc/apt/sources.list.d/k8s-addons-crio.list
    echo "REPO_CONFIGURED"
  register: k8s_crio_deb_repo_add
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'apt'
    - k8s_crio_repo_check is defined
    - k8s_crio_repo_check.status == 200

- name: "공식 K8s addons CRI-O 저장소에서 패키지 확인 (Ubuntu/Debian)"
  shell: |
    echo "=== K8s addons CRI-O 저장소에서 패키지 확인 ==="
    echo "목표 버전: {{ crio_target_version }}"
    
    # apt 캐시 갱신
    apt-get update -qq 2>/dev/null || true
    
    # 1. madison으로 버전 검색
    result1=$(apt-cache madison cri-o 2>/dev/null || echo "madison_failed")
    echo "검색1 (madison): $result1"
    
    # 2. policy로 버전 검색
    result2=$(apt-cache policy cri-o 2>/dev/null || echo "policy_failed")
    echo "검색2 (policy): $result2"
    
    # 3. show로 패키지 정보 확인
    result3=$(apt-cache show cri-o 2>/dev/null | grep Version || echo "show_failed")
    echo "검색3 (show): $result3"
    
    # 결과 분석
    if echo "$result1" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_MADISON"
    elif echo "$result2" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_POLICY"
    elif echo "$result3" | grep -q "{{ crio_target_version }}"; then
      echo "FOUND_IN_SHOW"
    elif echo "$result1$result2$result3" | grep -q "cri-o"; then
      echo "CRI-O_AVAILABLE_BUT_NOT_TARGET_VERSION"
    else
      echo "NOT_AVAILABLE"
    fi
  register: crio_repo_check
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'apt'
    - k8s_crio_deb_repo_add is defined
    - k8s_crio_deb_repo_add.stdout is defined
    - k8s_crio_deb_repo_add.stdout.find('REPO_CONFIGURED') != -1
  changed_when: false

# 공식 저장소 사용 가능 여부 확인 (타겟 버전이 있을 때만)
- name: "공식 K8s addons CRI-O 저장소 사용 가능성 확인"
  set_fact:
    crio_available_in_repo: true
  when: 
    - crio_needs_upgrade
    - k8s_crio_repo_check is defined
    - k8s_crio_repo_check.status == 200
    - crio_repo_check is defined
    - crio_repo_check.stdout is defined
    - crio_repo_check.rc == 0
    - "(crio_repo_check.stdout | regex_search('FOUND_IN_SEARCH[123]|FOUND_IN_MADISON|FOUND_IN_POLICY|FOUND_IN_SHOW')) is not none"

# K8s addons 저장소에서 타겟 버전을 찾을 수 없는 경우 초기화
- name: "K8s addons 저장소에서 타겟 버전 없음 - OpenSUSE 저장소로 fallback"
  set_fact:
    crio_available_in_repo: false
  when: 
    - crio_needs_upgrade
    - (k8s_crio_repo_check is not defined or 
       k8s_crio_repo_check.status != 200 or 
       crio_repo_check is not defined or 
       crio_repo_check.rc != 0 or 
       (crio_repo_check.stdout | regex_search('FOUND_IN_SEARCH[123]|FOUND_IN_MADISON|FOUND_IN_POLICY|FOUND_IN_SHOW')) is none)

- name: "CRI-O 저장소 확인 디버깅"
  debug:
    msg:
      - "CRI-O 저장소 확인 결과:"
      - "  K8s addons 저장소 접근: {{ k8s_crio_repo_check.status | default('접근 실패') }}"
      - "  패키지 확인 결과: {{ crio_repo_check.rc | default('N/A') }}"
      - "  출력 내용: {{ crio_repo_check.stdout | default('N/A') }}"
      - "  공식 저장소 사용 가능: {{ crio_available_in_repo | default(false) }}"
  when: 
    - crio_needs_upgrade
    - (k8s_crio_repo_check is defined or crio_repo_check is defined)

- name: "CRI-O 저장소 상태 디버그"
  debug:
    msg:
      - "=== CRI-O 업그레이드 상태 요약 ==="
      - "업그레이드 필요: {{ crio_needs_upgrade }}"
      - "현재 CRI-O 버전: {{ crio_current_version.stdout | default('unknown') }}"
      - "목표 CRI-O 버전: {{ crio_target_version | default('N/A') }}"
      - "패키지 관리자: {{ k8s_detected_package_manager | default('unknown') }}"
      - "--- 저장소 상태 ---"
      - "K8s addons 저장소 URL: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url | default('N/A') }}"
      - "K8s addons 저장소 접근: {{ k8s_crio_repo_check.status | default('접근 안됨') }}"
      - "공식 저장소 사용 가능: {{ crio_available_in_repo | default(false) }}"
      - "OpenSUSE URL: {{ opensuse_crio_repo_url | default('N/A') }}"
      - "--- 다음 단계 ---"
      - "{% if crio_available_in_repo | default(false) %}K8s addons 저장소에서 설치 진행{% else %}OpenSUSE 저장소 확인 진행{% endif %}"
  when: crio_needs_upgrade

# CRI-O 서비스 중지
- name: "CRI-O 서비스 중지"
  systemd:
    name: crio
    state: stopped
  register: crio_stop_result
  when: crio_needs_upgrade

- name: "CRI-O 서비스 중지 확인"
  debug:
    msg: "CRI-O 서비스 중지 {{ '성공' if crio_stop_result is succeeded else '실패' }}"
  when: 
    - crio_needs_upgrade
    - crio_stop_result is defined

# 방법 1: K8s addons 저장소에서 CRI-O 업그레이드
- name: "K8s addons 저장소에서 CRI-O 업그레이드 (Rocky/RHEL)"
  shell: |
    echo "=== K8s addons 저장소에서 CRI-O 설치 ==="
    echo "목표 버전: {{ crio_target_version }}"
    
    # 특정 저장소에서만 설치
    yum install -y --disablerepo="*" --enablerepo="k8s-addons-crio" cri-o
    
    echo "CRI-O 설치 완료"
    crio version 2>&1 || echo "버전 확인 실패"
  register: crio_official_yum_install
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'yum'
    - crio_available_in_repo | default(false)

- name: "K8s addons 저장소에서 CRI-O 업그레이드 (Ubuntu/Debian)"
  shell: |
    echo "=== K8s addons 저장소에서 CRI-O 설치 ==="
    echo "목표 버전: {{ crio_target_version }}"
    
    # apt로 설치
    apt-get install -y cri-o
    
    echo "CRI-O 설치 완료"
    crio version 2>&1 || echo "버전 확인 실패"
  register: crio_official_apt_install
  when: 
    - crio_needs_upgrade
    - k8s_detected_package_manager == 'apt'
    - crio_available_in_repo | default(false)

- name: "K8s addons 저장소 CRI-O 설치 결과 확인"
  debug:
    msg: 
      - "YUM 설치: {{ 'N/A' if crio_official_yum_install is not defined else ('성공' if crio_official_yum_install.rc == 0 else '실패') }}"
      - "APT 설치: {{ 'N/A' if crio_official_apt_install is not defined else ('성공' if crio_official_apt_install.rc == 0 else '실패') }}"
      - "저장소 URL: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url | default('N/A') }}"
      - "설치 출력: {{ (crio_official_yum_install.stdout if crio_official_yum_install is defined else crio_official_apt_install.stdout if crio_official_apt_install is defined else 'N/A') }}"
  when: 
    - crio_needs_upgrade
    - crio_available_in_repo | default(false)

- name: "K8s addons 저장소 CRI-O 설치 실패 시 중단"
  fail:
    msg: 
      - "K8s addons 저장소에서 CRI-O 설치가 실패했습니다!"
      - "목표 버전: {{ crio_target_version }}"
      - "패키지 관리자: {{ k8s_detected_package_manager }}"
      - "저장소 URL: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url | default('N/A') }}"
      - "YUM 결과: {{ 'N/A' if crio_official_yum_install is not defined else ('성공' if crio_official_yum_install.rc == 0 else '실패') }}"
      - "APT 결과: {{ 'N/A' if crio_official_apt_install is not defined else ('성공' if crio_official_apt_install.rc == 0 else '실패') }}"
      - "오류 내용: {{ (crio_official_yum_install.stderr if crio_official_yum_install is defined else crio_official_apt_install.stderr if crio_official_apt_install is defined else 'N/A') }}"
      - "저장소 설정을 확인하거나 수동 설치를 진행해주세요."
  when: 
    - crio_needs_upgrade
    - crio_available_in_repo | default(false)
    - ((crio_official_yum_install is defined and crio_official_yum_install.rc != 0) or 
       (crio_official_apt_install is defined and crio_official_apt_install.rc != 0))

# 방법 2: 바이너리 방식으로 CRI-O 설치 (K8s addons 저장소에 없는 경우)
- name: "OpenSUSE 저장소 사용 가능성 확인"
  debug:
    msg: 
      - "K8s addons 저장소에서 CRI-O를 찾을 수 없습니다."
      - "OpenSUSE 저장소에서 CRI-O {{ crio_target_version }} 사용 가능: {{ crio_opensuse_available | default(false) }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))

- name: "OpenSUSE 저장소에서 CRI-O 바이너리 다운로드 URL 확인"
  uri:
    url: "{{ opensuse_crio_repo_url | default('') | regex_replace('/x86_64/$', '/') }}"
    method: GET
    status_code: [200, 404]
  register: opensuse_repo_check
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""
  ignore_errors: true

- name: "OpenSUSE 저장소 응답 확인"
  set_fact:
    opensuse_crio_available: "{{ opensuse_repo_check.status == 200 }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_repo_check is defined
    - opensuse_repo_check.status is defined

- name: "OpenSUSE 저장소 접근 실패 시 중단"
  fail:
    msg: 
      - "모든 CRI-O 저장소에 접근할 수 없습니다."
      - "K8s addons 저장소: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url | default('N/A') }} (상태: {{ k8s_crio_repo_check.status | default('N/A') }})"
      - "OpenSUSE 저장소: {{ opensuse_crio_repo_url | default('정의되지 않음') }} (상태: {{ opensuse_repo_check.status | default('N/A') }})"
      - "네트워크 연결을 확인하거나 수동으로 CRI-O를 설치해주세요."
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_repo_check is defined
    - opensuse_repo_check.status is defined
    - opensuse_repo_check.status != 200

- name: "저장소 설정 문제로 인한 중단"
  fail:
    msg:
      - "CRI-O {{ crio_target_version }}를 설치할 수 있는 저장소를 찾을 수 없습니다!"
      - "K8s addons 저장소: {{ 'URL 없음' if k8s_crio_repo_url is not defined else ('접근 실패' if k8s_crio_repo_check.status != 200 else '패키지 없음') }}"
      - "OpenSUSE 저장소: {{ 'URL 없음' if opensuse_crio_repo_url is not defined else ('접근 실패' if opensuse_repo_check is not defined else '확인 중') }}"
      - "다음을 확인해주세요:"
      - "  1. CRI-O 저장소가 올바르게 설정되었는지"
      - "  2. 네트워크 연결 상태"
      - "  3. {{ crio_target_version }} 버전이 실제로 존재하는지"
  when:
    - crio_needs_upgrade  
    - not (crio_available_in_repo | default(false))
    - (opensuse_crio_repo_url is not defined or opensuse_crio_repo_url == "" or opensuse_repo_check is not defined)

- name: "CRI-O 바이너리 다운로드 디렉토리 생성"
  file:
    path: /tmp/crio-upgrade
    state: directory
    mode: '0755'
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""

- name: "OpenSUSE 저장소에서 사용 가능한 CRI-O 패키지 목록 확인 (curl 사용)"
  shell: |
    curl -s -L "{{ opensuse_crio_repo_url }}" || echo "curl_failed"
  register: opensuse_package_list_curl
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""

- name: "저장소 응답 확인 (디버깅)"
  debug:
    msg: 
      - "curl 반환 코드: {{ opensuse_package_list_curl.rc | default('미정의') }}"
      - "응답 내용 길이: {{ opensuse_package_list_curl.stdout | default('') | length }}"
      - "응답 내용 일부: {{ opensuse_package_list_curl.stdout[:200] | default('내용 없음') }}..."
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))

- name: "사용 가능한 CRI-O 패키지 파일명 추출 (cri-o로 시작하는 rpm 파일)"
  set_fact:
    crio_package_name: "{{ opensuse_package_list_curl.stdout | default('') | regex_search('cri-o-[^\"\\s<>]*\\.rpm') }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_package_list_curl is defined
    - opensuse_package_list_curl.stdout is defined
    - opensuse_package_list_curl.rc == 0

- name: "HTML에서 href 링크를 통한 CRI-O RPM 파일 찾기 (첫 번째 방법 실패 시)"
  set_fact:
    crio_package_name: "{{ opensuse_package_list_curl.stdout | default('') | regex_search('href=\"([^\"]*cri-o[^\"]*\\.rpm)\"', '\\1') | list | first | default('') }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_package_list_curl is defined
    - opensuse_package_list_curl.stdout is defined
    - opensuse_package_list_curl.rc == 0
    - (crio_package_name is not defined or crio_package_name == "")

- name: "저장소 HTML 내용 디버깅"
  debug:
    msg: 
      - "저장소 URL: {{ opensuse_crio_repo_url | default('정의되지 않음') }}"
      - "HTML 내용 길이: {{ opensuse_package_list_curl.stdout | default('') | length }}"
      - "찾은 CRI-O 패키지: {{ crio_package_name | default('없음') }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))

- name: "CRI-O 패키지 파일명 확인"
  debug:
    msg: "찾은 CRI-O 패키지: {{ crio_package_name | default('없음') }}"
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""

- name: "CRI-O 패키지명 존재 확인"
  fail:
    msg: 
      - "모든 저장소에서 CRI-O {{ crio_target_version }} 패키지를 찾을 수 없습니다."
      - "K8s addons 저장소: {{ k8s_crio_repo_url if k8s_detected_package_manager == 'yum' else k8s_crio_deb_repo_url | default('N/A') }}"
      - "OpenSUSE 저장소: {{ opensuse_crio_repo_url }}"
      - "CRI-O 업그레이드가 필수이므로 클러스터 업그레이드를 중단합니다."
      - "수동으로 CRI-O를 설치하거나 다른 버전을 시도해주세요."
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""
    - (crio_package_name is not defined or crio_package_name == "")

- name: "실제 CRI-O RPM 패키지 다운로드"
  get_url:
    url: "{{ opensuse_crio_repo_url }}{{ crio_package_name }}"
    dest: "/tmp/crio-upgrade/{{ crio_package_name }}"
    mode: '0644'
  register: crio_download_result
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""
    - crio_package_name is defined
    - crio_package_name != ""

- name: "CRI-O 패키지 다운로드 결과 확인"
  debug:
    msg: "CRI-O 패키지 다운로드 {{ '성공' if crio_download_result is succeeded else '실패' }}: {{ crio_package_name | default('패키지명 없음') }}"
  when: 
    - crio_needs_upgrade
    - crio_download_result is defined
    - crio_package_name is defined

- name: "CRI-O 패키지 다운로드 실패 시 중단"
  fail:
    msg: 
      - "CRI-O 패키지 다운로드가 실패했습니다: {{ crio_package_name }}"
      - "OpenSUSE 저장소 URL: {{ opensuse_crio_repo_url }}{{ crio_package_name }}"
      - "K8s addons 저장소에서 설치 실패 후 OpenSUSE 저장소도 사용할 수 없습니다."
      - "네트워크 연결 또는 저장소 문제를 확인해주세요."
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - crio_download_result is defined
    - crio_download_result is failed

- name: "CRI-O RPM 패키지 설치"
  yum:
    name: "/tmp/crio-upgrade/{{ crio_package_name }}"
    state: present
    disable_gpg_check: yes
  register: crio_install_result
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""
    - crio_package_name is defined
    - crio_package_name != ""
    - crio_download_result is defined
    - crio_download_result is succeeded

- name: "CRI-O 패키지 설치 결과 확인"
  debug:
    msg: "CRI-O 패키지 설치 {{ '성공' if crio_install_result.rc == 0 else '실패' }}: {{ crio_package_name }}"
  when: 
    - crio_needs_upgrade
    - crio_install_result is defined

- name: "CRI-O 설치 실패 시 중단"
  fail:
    msg: 
      - "CRI-O RPM 패키지 설치가 실패했습니다: {{ crio_package_name }}"
      - "K8s addons 저장소와 OpenSUSE 저장소 모두에서 설치에 실패했습니다."
      - "수동으로 CRI-O를 설치하거나 시스템 의존성을 확인해주세요."
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))
    - opensuse_crio_repo_url is defined
    - opensuse_crio_repo_url != ""
    - crio_install_result is defined
    - crio_install_result is failed

# CRI-O 설정 업데이트
- name: "CRI-O 설정 백업"
  copy:
    src: /etc/crio/crio.conf
    dest: "/etc/crio/crio.conf.backup.{{ ansible_date_time.epoch }}"
    remote_src: yes
  when: crio_needs_upgrade
  ignore_errors: true

- name: "CRI-O 구성 파일 업데이트"
  template:
    src: crio.conf.j2
    dest: /etc/crio/crio.conf
    backup: yes
    mode: '0644'
  when: crio_needs_upgrade
  notify:
    - restart crio

# CRI-O 서비스 재시작 및 활성화
- name: "systemd 데몬 리로드"
  systemd:
    daemon_reload: yes
  when: crio_needs_upgrade

- name: "CRI-O 서비스 재시작 및 활성화"
  systemd:
    name: crio
    state: restarted
    enabled: yes
  register: crio_restart_result
  when: crio_needs_upgrade

- name: "CRI-O 서비스 재시작 대기"
  wait_for:
    path: /var/run/crio/crio.sock
    timeout: 60
  when: crio_needs_upgrade

- name: "CRI-O 서비스 재시작 결과 확인"
  debug:
    msg: "CRI-O 서비스 재시작 {{ '성공' if crio_restart_result.status.ActiveState == 'active' else '실패' }}"
  when: 
    - crio_needs_upgrade
    - crio_restart_result is defined

# 업그레이드 후 검증
- name: "업그레이드된 CRI-O 버전 확인"
  shell: |
    if command -v crio >/dev/null 2>&1; then
      # crio version 명령어에서 버전 추출 (stdout 또는 stderr 모두 확인)
      version_output=$(crio version 2>&1)
      echo "$version_output" | grep -E "(crio version|RuntimeVersion|Starting CRI-O, version)" | head -1 | sed -E 's/.*version:? ([0-9]+\.[0-9]+\.[0-9]+).*/\1/' | sed 's/^v//'
    else
      echo "not_installed"
    fi
  register: crio_upgraded_version
  when: crio_needs_upgrade
  changed_when: false
  retries: 3
  delay: 5

- name: "CRI-O 서비스 상태 확인"
  systemd:
    name: crio
  register: crio_service_status
  when: crio_needs_upgrade

- name: "CRI-O 소켓 상태 확인"
  stat:
    path: /var/run/crio/crio.sock
  register: crio_socket_status
  when: crio_needs_upgrade

- name: "CRI-O 업그레이드 성공 여부 확인"
  set_fact:
    crio_upgrade_success: "{{ crio_upgraded_version.stdout == crio_target_version }}"
  when: 
    - crio_needs_upgrade
    - crio_upgraded_version is defined

- name: "CRI-O 업그레이드 실패 시 중단"
  fail:
    msg:
      - "CRI-O 업그레이드가 완전히 완료되지 않았습니다!"
      - "목표 버전: {{ crio_target_version }}"
      - "현재 버전: {{ crio_upgraded_version.stdout | default('확인 불가') }}"
      - "CRI-O 버전이 일치하지 않으므로 클러스터 업그레이드를 중단합니다."
      - "수동으로 CRI-O를 수정한 후 다시 시도해주세요."
  when: 
    - crio_needs_upgrade
    - crio_upgraded_version is defined
    - not (crio_upgrade_success | default(false))

# kubelet과 CRI-O 연결 테스트
- name: "kubelet 서비스 재시작 (CRI-O 연결 갱신)"
  systemd:
    name: kubelet
    state: restarted
  when: crio_needs_upgrade
  register: kubelet_restart_result

- name: "kubelet 재시작 후 대기"
  pause:
    seconds: 10
  when: crio_needs_upgrade

- name: "kubelet 서비스 상태 확인"
  systemd:
    name: kubelet
  register: kubelet_service_status
  when: crio_needs_upgrade

- name: "CRI-O와 kubelet 연결 테스트"
  shell: |
    timeout 30 crictl info >/dev/null 2>&1 && echo "연결 성공" || echo "연결 실패"
  register: crio_kubelet_connection
  when: crio_needs_upgrade
  changed_when: false
  ignore_errors: true

- name: "CRI-O 서비스 상태 검증"
  fail:
    msg:
      - "CRI-O 서비스가 정상적으로 실행되지 않습니다!"
      - "서비스 상태: {{ crio_service_status.status.ActiveState | default('확인 불가') }}"
      - "소켓 파일 존재: {{ crio_socket_status.stat.exists | default(false) }}"
      - "CRI-O/kubelet 연결: {{ crio_kubelet_connection.stdout | default('확인 불가') }}"
      - "'systemctl status crio' 명령어로 오류를 확인해주세요."
  when: 
    - crio_needs_upgrade
    - crio_service_status is defined
    - (crio_service_status.status.ActiveState != 'active' or 
       not (crio_socket_status.stat.exists | default(false)) or
       crio_kubelet_connection.stdout == '연결 실패')

- name: "CRI-O 업그레이드 결과 표시"
  debug:
    msg:
      - "=== CRI-O 업그레이드 완료 ==="
      - "이전 버전: {{ crio_current_version.stdout }}"
      - "업그레이드된 버전: {{ crio_upgraded_version.stdout | default('확인 불가') }}"
      - "업그레이드 성공: {{ crio_upgrade_success | default(false) }}"
      - "CRI-O 서비스 상태: {{ crio_service_status.status.ActiveState | default('확인 불가') }}"
      - "kubelet 서비스 상태: {{ kubelet_service_status.status.ActiveState | default('확인 불가') }}"
      - "소켓 파일 존재: {{ crio_socket_status.stat.exists | default(false) }}"
      - "CRI-O/kubelet 연결: {{ crio_kubelet_connection.stdout | default('확인 불가') }}"
  when: crio_needs_upgrade

# 임시 파일 정리
- name: "임시 다운로드 파일 정리"
  file:
    path: /tmp/crio-upgrade
    state: absent
  when: 
    - crio_needs_upgrade
    - not (crio_available_in_repo | default(false))

- name: "CRI-O 업그레이드 완료"
  debug:
    msg: "CRI-O 컨테이너 런타임 업그레이드가 완료되었습니다."
  when: crio_needs_upgrade