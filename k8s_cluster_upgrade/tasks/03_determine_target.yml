---
# 목표 버전 결정

- name: "목표 버전이 이미 설정된 경우 검증"
  debug:
    msg: "설정된 목표 버전: {{ k8s_target_version }}"
  when: k8s_target_version != ""

- name: "강제 버전 설정 확인"
  debug:
    msg: "강제 버전 모드가 활성화되어 있습니다."
  when: k8s_force_version

# 자동 다음 버전 결정
- name: "버전 매트릭스에서 다음 버전 찾기"
  set_fact:
    k8s_next_version: "{{ k8s_version_matrix[k8s_current_minor_version].next_version }}"
  when: 
    - k8s_target_version == ""
    - k8s_current_minor_version in k8s_version_matrix
    - not k8s_force_version

- name: "다음 버전 자동 설정"
  set_fact:
    k8s_target_version: "v{{ k8s_next_version }}.0"
  when: 
    - k8s_target_version == ""
    - k8s_next_version is defined
    - not k8s_force_version

# 최신 패치 버전 확인
- name: "최신 패치 버전 확인 (온라인)"
  uri:
    url: "{{ k8s_binary_base_url }}/stable-{{ k8s_next_version | default(k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '')) }}.txt"
    method: GET
    timeout: 10
    return_content: yes
  register: latest_patch_version
  ignore_errors: true
  when: network_check is not failed

- name: "최신 패치 버전 응답 디버그"
  debug:
    var: latest_patch_version
  when: latest_patch_version is defined

# 최신 패치 버전으로 업데이트
- name: "최신 패치 버전으로 업데이트"
  set_fact:
    k8s_target_version: "{{ latest_patch_version.content.strip() }}"
  when:
    - latest_patch_version is defined
    - latest_patch_version is succeeded
    - latest_patch_version.content is defined
    - not k8s_force_version
    - k8s_target_version != ""

# 알려진 버그가 있는 버전 체크 및 회피
- name: "알려진 버그가 있는 버전 체크"
  set_fact:
    k8s_buggy_version_info: "{{ item }}"
  loop: "{{ k8s_known_buggy_versions }}"
  when: 
    - k8s_enable_buggy_version_override | default(true)
    - k8s_target_version == item.version
    - (not k8s_force_version or not item.bypass_with_force | default(true))
  loop_control:
    loop_var: item

- name: "버그가 있는 버전 감지 경고"
  debug:
    msg: 
      - "⚠️  경고: {{ k8s_target_version }}는 알려진 버그가 있는 버전입니다!"
      - "설명: {{ k8s_buggy_version_info.description }}"
      - "심각도: {{ k8s_buggy_version_info.severity }}"
      - "권장 대체 버전: {{ k8s_buggy_version_info.replacement_version }}"
  when: 
    - k8s_buggy_version_info is defined
    - k8s_enable_buggy_version_override | default(true)

- name: "버그가 있는 버전 자동 교체"
  set_fact:
    k8s_original_target_version: "{{ k8s_target_version }}"
    k8s_target_version: "{{ k8s_buggy_version_info.replacement_version }}"
  when:
    - k8s_buggy_version_info is defined
    - k8s_enable_buggy_version_override | default(true)
    - k8s_buggy_version_override_behavior | default('upgrade') == 'upgrade'

- name: "버그 회피 완료 알림"
  debug:
    msg: 
      - "✅ 버그가 있는 버전 자동 회피 완료"
      - "원래 목표 버전: {{ k8s_original_target_version | default('N/A') }}"
      - "수정된 목표 버전: {{ k8s_target_version }}"
      - "회피 이유: {{ k8s_buggy_version_info.description | default('N/A') }}"
  when: 
    - k8s_original_target_version is defined
    - k8s_target_version != k8s_original_target_version

# Kubernetes 1.29.15 버그 회피 로직 (1.29.16+ 강제 사용) - 하위 호환성을 위해 유지
- name: "Kubernetes 1.29.15 버그 회피 - 목표 버전 확인"
  debug:
    msg: "⚠️  경고: Kubernetes 1.29.15에는 치명적인 버그가 있습니다. 1.29.16 이상 버전을 사용합니다."
  when: 
    - k8s_target_version == "v1.29.15"
    - not k8s_force_version
    - k8s_buggy_version_info is not defined  # 위에서 처리되지 않은 경우만

- name: "Kubernetes 1.29.15 회피 - 1.29.16+ 버전 확인"
  uri:
    url: "{{ k8s_binary_base_url }}/stable-1.29.txt"
    method: GET
    timeout: 10
    return_content: yes
  register: k8s_129_latest_version
  ignore_errors: true
  when: 
    - k8s_target_version == "v1.29.15"
    - not k8s_force_version
    - k8s_buggy_version_info is not defined

- name: "Kubernetes 1.29.15 회피 - 최신 1.29.x 버전으로 교체"
  set_fact:
    k8s_target_version: "{{ k8s_129_latest_version.content.strip() }}"
  when:
    - k8s_target_version == "v1.29.15"
    - not k8s_force_version
    - k8s_buggy_version_info is not defined
    - k8s_129_latest_version is defined
    - k8s_129_latest_version is succeeded
    - k8s_129_latest_version.content is defined
    - k8s_129_latest_version.content.strip() is version("v1.29.16", ">=")

- name: "Kubernetes 1.29.15 회피 - 수동 1.29.16 설정 (fallback)"
  set_fact:
    k8s_target_version: "v1.29.16"
  when:
    - k8s_target_version == "v1.29.15"
    - not k8s_force_version
    - k8s_buggy_version_info is not defined
    - (k8s_129_latest_version is not defined or 
       k8s_129_latest_version is failed or
       k8s_129_latest_version.content is not defined or
       k8s_129_latest_version.content.strip() is version("v1.29.16", "<"))

- name: "Kubernetes 1.29.15 회피 완료 알림"
  debug:
    msg: 
      - "✅ Kubernetes 1.29.15 버그 회피 완료"
      - "원래 목표 버전: v1.29.15"
      - "수정된 목표 버전: {{ k8s_target_version }}"
  when: 
    - k8s_target_version != "v1.29.15"
    - k8s_target_version is match("v1.29\\.1[6-9]|v1.29\\.[2-9][0-9]")
    - k8s_buggy_version_info is not defined 

# OS 호환성 확인
- name: "현재 OS 문자열 생성"
  set_fact:
    current_os_string: "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"

- name: "목표 버전의 OS 호환성 확인"
  set_fact:
    k8s_target_minor_version: "{{ k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '') }}"

- name: "목표 버전 정보 디버깅"
  debug:
    msg:
      - "목표 버전 디버깅 정보:"
      - "  k8s_target_version: {{ k8s_target_version }}"
      - "  k8s_target_minor_version: {{ k8s_target_minor_version }}"
      - "  current_os_string: {{ current_os_string }}"
      - "  매트릭스에 버전 존재: {{ k8s_target_minor_version in k8s_version_matrix }}"
      - "  사용 가능한 매트릭스 버전: {{ k8s_version_matrix.keys() | list }}"

- name: "OS 호환성 검증"
  fail:
    msg: "목표 버전 {{ k8s_target_version }}은 현재 OS ({{ current_os_string }})와 호환되지 않습니다."
  when:
    - k8s_target_minor_version in k8s_version_matrix
    - k8s_version_matrix[k8s_target_minor_version].supported_os is defined
    - current_os_string not in k8s_version_matrix[k8s_target_minor_version].supported_os

- name: "매트릭스에 없는 버전 경고"
  debug:
    msg: "경고: 목표 버전 {{ k8s_target_minor_version }}이 버전 매트릭스에 정의되지 않았습니다. OS 호환성 검증을 건너뜁니다."
  when: k8s_target_minor_version not in k8s_version_matrix

# 버전 비교 및 검증
- name: "현재 버전과 목표 버전 비교"
  debug:
    msg:
      - "현재 버전: {{ k8s_current_version }}"
      - "목표 버전: {{ k8s_target_version }}"

- name: "동일 버전 업그레이드 확인"
  debug:
    msg: "현재 버전과 목표 버전이 동일합니다. 업그레이드를 건너뜁니다."
  when: k8s_current_version == k8s_target_version

- name: "다운그레이드 방지"
  fail:
    msg: "다운그레이드는 지원되지 않습니다. 현재: {{ k8s_current_version }}, 목표: {{ k8s_target_version }}"
  when: 
    - k8s_current_version != k8s_target_version
    - k8s_current_version is version(k8s_target_version, '>')

# 스킵 조건 처리
- name: "업그레이드 스킵 설정"
  set_fact:
    k8s_skip_upgrade: true
  when: k8s_current_version == k8s_target_version

- name: "업그레이드 진행 설정"
  set_fact:
    k8s_skip_upgrade: false
  when: k8s_current_version != k8s_target_version

# 목표 버전 정보 표시
- name: "목표 버전 정보 표시"
  debug:
    msg:
      - "=== 업그레이드 계획 ==="
      - "현재 버전: {{ k8s_current_version }}"
      - "목표 버전: {{ k8s_target_version }}"
      - "업그레이드 필요: {{ not k8s_skip_upgrade }}"
      - "강제 모드: {{ k8s_force_version }}"
      - "OS 호환성: ✓"

# 추가 구성 요소 버전 정보
- name: "관련 구성 요소 버전 정보"
  debug:
    msg:
      - "=== 관련 구성 요소 버전 ==="
      - "etcd: {{ k8s_version_matrix[k8s_target_minor_version].etcd_version | default('N/A') }}"
      - "cri-o: {{ k8s_version_matrix[k8s_target_minor_version].crio_version | default('N/A') }}"
  when: k8s_target_minor_version in k8s_version_matrix

- name: "목표 버전 결정 완료"
  debug:
    msg: "목표 버전 결정이 완료되었습니다: {{ k8s_target_version }}" 