---
# 목표 버전 결정

- name: "목표 버전이 이미 설정된 경우 검증"
  debug:
    msg: "설정된 목표 버전: {{ k8s_target_version }}"
  when: k8s_target_version != ""

- name: "강제 버전 설정 확인"
  debug:
    msg: "강제 버전 모드가 활성화되어 있습니다."
  when: k8s_force_version

# 자동 다음 버전 결정
- name: "버전 매트릭스에서 다음 버전 찾기"
  set_fact:
    k8s_next_version: "{{ k8s_version_matrix[k8s_current_minor_version].next_version }}"
  when: 
    - k8s_target_version == ""
    - k8s_current_minor_version in k8s_version_matrix
    - not k8s_force_version

- name: "다음 버전 자동 설정"
  set_fact:
    k8s_target_version: "v{{ k8s_next_version }}.0"
  when: 
    - k8s_target_version == ""
    - k8s_next_version is defined
    - not k8s_force_version

# 최신 패치 버전 확인
- name: "최신 패치 버전 확인 (온라인)"
  uri:
    url: "{{ k8s_binary_base_url }}/stable-{{ k8s_next_version | default(k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '')) }}.txt"
    method: GET
    timeout: 10
    return_content: yes
  register: latest_patch_version
  ignore_errors: true
  when: 
    - network_check is not failed
    - not (k8s_version_fallback_enabled | default(false) and (k8s_next_version | default(k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '')) is version(k8s_version_fallback_min_version | default('1.30'), '>=')))

- name: "최신 패치 버전 응답 디버그"
  debug:
    var: latest_patch_version
  when: latest_patch_version is defined

- name: "최신 패치 버전으로 업데이트"
  set_fact:
    k8s_target_version: "{{ latest_patch_version.content.strip() }}"
  when:
    - latest_patch_version is defined
    - latest_patch_version is succeeded
    - latest_patch_version.content is defined
    - not k8s_force_version
    - k8s_target_version != ""

- name: "1.30 이후 버전 온라인 확인 건너뛰기 알림"
  debug:
    msg:
      - "ℹ️  1.30 이후 버전에 대해서는 온라인 최신 패치 확인을 건너뛰고 fallback 로직을 사용합니다."
      - "  대상 버전: {{ k8s_next_version | default(k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '')) }}"
      - "  현재 타겟 버전: {{ k8s_target_version }}"
  when:
    - k8s_version_fallback_enabled | default(false)
    - (k8s_next_version | default(k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '')) is version(k8s_version_fallback_min_version | default('1.30'), '>='))

# OS 호환성 확인
- name: "현재 OS 문자열 생성"
  set_fact:
    current_os_string: "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"

- name: "목표 버전의 OS 호환성 확인"
  set_fact:
    k8s_target_minor_version: "{{ k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '') }}"

- name: "목표 버전 정보 디버깅"
  debug:
    msg:
      - "목표 버전 디버깅 정보:"
      - "  k8s_target_version: {{ k8s_target_version }}"
      - "  k8s_target_minor_version: {{ k8s_target_minor_version }}"
      - "  current_os_string: {{ current_os_string }}"
      - "  매트릭스에 버전 존재: {{ k8s_target_minor_version in k8s_version_matrix }}"
      - "  사용 가능한 매트릭스 버전: {{ k8s_version_matrix.keys() | list }}"

- name: "OS 호환성 검증"
  fail:
    msg: "목표 버전 {{ k8s_target_version }}은 현재 OS ({{ current_os_string }})와 호환되지 않습니다."
  when:
    - k8s_target_minor_version in k8s_version_matrix
    - k8s_version_matrix[k8s_target_minor_version].supported_os is defined
    - current_os_string not in k8s_version_matrix[k8s_target_minor_version].supported_os

- name: "매트릭스에 없는 버전 경고"
  debug:
    msg: "경고: 목표 버전 {{ k8s_target_minor_version }}이 버전 매트릭스에 정의되지 않았습니다. OS 호환성 검증을 건너뜁니다."
  when: k8s_target_minor_version not in k8s_version_matrix

# 1.30 이후 버전에 대한 패키지 버전 fallback 로직
- name: "1.30 이후 버전에 대한 fallback 활성화 여부 확인"
  set_fact:
    k8s_need_fallback: "{{ k8s_target_minor_version is version(k8s_version_fallback_min_version, '>=') }}"
  when: k8s_version_fallback_enabled | default(false)

- name: "Fallback 적용 여부 디버깅"
  debug:
    msg:
      - "🔍 Fallback 설정 확인:"
      - "  fallback_enabled: {{ k8s_version_fallback_enabled | default(false) }}"
      - "  target_minor_version: {{ k8s_target_minor_version | default('N/A') }}"
      - "  fallback_min_version: {{ k8s_version_fallback_min_version | default('N/A') }}"
      - "  need_fallback: {{ k8s_need_fallback | default(false) }}"
      - "  current_target_version: {{ k8s_target_version | default('N/A') }}"
  when: k8s_version_fallback_enabled | default(false)

- name: "사용 가능한 패치 버전 확인"
  set_fact:
    k8s_available_patches: "{{ k8s_version_matrix[k8s_target_minor_version].available_patch_versions | default([]) }}"
  when: 
    - k8s_need_fallback | default(false)
    - k8s_target_minor_version in k8s_version_matrix

- name: "패치 버전 확인 디버깅"
  debug:
    msg:
      - "📋 패치 버전 확인 결과:"
      - "  매트릭스에 버전 존재: {{ k8s_target_minor_version in k8s_version_matrix }}"
      - "  사용 가능한 패치 버전: {{ k8s_available_patches | default([]) | join(', ') }}"
      - "  패치 버전 개수: {{ k8s_available_patches | default([]) | length }}"
  when: k8s_need_fallback | default(false)

- name: "현재 요청된 패치 버전 확인"
  set_fact:
    k8s_requested_patch_version: "{{ k8s_target_version | regex_replace('^v', '') }}"
  when: 
    - k8s_need_fallback | default(false)
    - k8s_target_version is defined
    - k8s_target_version != ""

- name: "요청된 버전이 사용 가능한지 확인"
  set_fact:
    k8s_requested_version_available: "{{ k8s_requested_patch_version in k8s_available_patches }}"
  when: 
    - k8s_need_fallback | default(false)
    - k8s_requested_patch_version is defined
    - k8s_available_patches is defined

- name: "Fallback 버전 선택"
  set_fact:
    k8s_fallback_version: "{{ k8s_available_patches[0] if k8s_version_fallback_strategy == 'latest_patch' and k8s_available_patches | length > 0 else k8s_requested_patch_version }}"
  when: 
    - k8s_need_fallback | default(false)
    - k8s_available_patches | length > 0
    - k8s_requested_patch_version is defined
    - not (k8s_requested_version_available | default(false))

- name: "요청된 버전과 fallback 버전 비교"
  debug:
    msg:
      - "🔄 버전 Fallback 정보:"
      - "  요청된 버전: {{ k8s_requested_patch_version | default('N/A') }}"
      - "  요청된 버전 사용 가능: {{ k8s_requested_version_available | default('N/A') }}"
      - "  사용 가능한 패치 버전: {{ k8s_available_patches | default([]) | join(', ') }}"
      - "  Fallback 전략: {{ k8s_version_fallback_strategy | default('N/A') }}"
      - "  선택된 Fallback 버전: {{ k8s_fallback_version | default('N/A') }}"
      - "  Fallback 필요: {{ not (k8s_requested_version_available | default(true)) }}"
  when: k8s_need_fallback | default(false)

- name: "Fallback 버전 적용"
  set_fact:
    k8s_target_version: "v{{ k8s_fallback_version }}"
    k8s_version_fallback_applied: true
  when: 
    - k8s_need_fallback | default(false)
    - k8s_fallback_version is defined
    - k8s_fallback_version != ""
    - k8s_requested_patch_version is defined
    - not (k8s_requested_version_available | default(true))

- name: "Fallback 적용 알림"
  debug:
    msg:
      - "⚠️  패키지 버전 Fallback이 적용되었습니다!"
      - "  원래 요청 버전: {{ k8s_requested_patch_version | default('N/A') }}"
      - "  적용된 버전: {{ k8s_fallback_version | default('N/A') }}"
      - "  새로운 타겟 버전: {{ k8s_target_version | default('N/A') }}"
      - "  이유: 요청된 버전이 사용 가능한 패치 버전 리스트에 없습니다."
  when: k8s_version_fallback_applied | default(false)

- name: "Fallback 미적용 알림"
  debug:
    msg:
      - "✅ 요청된 버전을 그대로 사용합니다."
      - "  사용 버전: {{ k8s_target_version | default('N/A') }}"
      - "  이유: 요청된 버전이 사용 가능한 패치 버전 리스트에 포함되어 있습니다."
  when: 
    - k8s_version_fallback_enabled | default(false)
    - k8s_need_fallback | default(false)
    - k8s_requested_version_available | default(true)
    - not (k8s_version_fallback_applied | default(false))

# 버전 비교 및 검증
- name: "현재 버전과 목표 버전 비교"
  debug:
    msg:
      - "현재 버전: {{ k8s_current_version }}"
      - "목표 버전: {{ k8s_target_version }}"

- name: "동일 버전 업그레이드 확인"
  debug:
    msg: "현재 버전과 목표 버전이 동일합니다. 업그레이드를 건너뜁니다."
  when: k8s_current_version == k8s_target_version

- name: "다운그레이드 방지"
  fail:
    msg: "다운그레이드는 지원되지 않습니다. 현재: {{ k8s_current_version }}, 목표: {{ k8s_target_version }}"
  when: 
    - k8s_current_version != k8s_target_version
    - k8s_current_version is version(k8s_target_version, '>')

# 스킵 조건 처리
- name: "업그레이드 스킵 설정"
  set_fact:
    k8s_skip_upgrade: true
  when: k8s_current_version == k8s_target_version

- name: "업그레이드 진행 설정"
  set_fact:
    k8s_skip_upgrade: false
  when: k8s_current_version != k8s_target_version

# 목표 버전 정보 표시
- name: "목표 버전 정보 표시"
  debug:
    msg:
      - "=== 업그레이드 계획 ==="
      - "현재 버전: {{ k8s_current_version }}"
      - "목표 버전: {{ k8s_target_version }}"
      - "업그레이드 필요: {{ not k8s_skip_upgrade }}"
      - "강제 모드: {{ k8s_force_version }}"
      - "OS 호환성: ✓"

# 추가 구성 요소 버전 정보
- name: "관련 구성 요소 버전 정보"
  debug:
    msg:
      - "=== 관련 구성 요소 버전 ==="
      - "etcd: {{ k8s_version_matrix[k8s_target_minor_version].etcd_version | default('N/A') }}"
      - "cri-o: {{ k8s_version_matrix[k8s_target_minor_version].crio_version | default('N/A') }}"
  when: k8s_target_minor_version in k8s_version_matrix

- name: "목표 버전 결정 완료"
  debug:
    msg: "목표 버전 결정이 완료되었습니다: {{ k8s_target_version }}" 