---
# 1.30 이후 버전에 대한 Fallback 패키지 설치/업그레이드

- name: "Fallback 패키지 설치 시작"
  debug:
    msg: 
      - "🔄 Fallback 패키지 설치를 시작합니다"
      - "  요청된 패키지: {{ k8s_packages_to_install | join(', ') }}"
      - "  사용 가능한 패치 버전: {{ k8s_available_patches | default([]) | join(', ') }}"

# 현재 요청된 패키지에서 버전 정보 추출
- name: "패키지 버전 정보 추출"
  set_fact:
    k8s_package_base_names: "{{ k8s_packages_to_install | map('regex_replace', '=.*', '') | list }}"
    k8s_target_minor_version: "{{ k8s_target_version | regex_replace('^v', '') | regex_replace('\\.[0-9]+$', '') }}"

- name: "패키지 정보 디버그"
  debug:
    msg:
      - "패키지 기본 이름: {{ k8s_package_base_names | join(', ') }}"
      - "타겟 마이너 버전: {{ k8s_target_minor_version }}"

# yum 저장소 설정 (선택된 repo 사용)
- name: "Kubernetes yum 저장소 설정"
  yum_repository:
    name: "{{ k8s_selected_repo_config.yum.repo_name }}"
    description: "Kubernetes Repository ({{ 'Official' if k8s_use_official_repo | default(false) else 'Legacy' }})"
    baseurl: "{{ k8s_selected_repo_config.yum.repo_baseurl }}"
    gpgcheck: yes
    gpgkey: "{{ k8s_selected_repo_config.yum.gpg_key }}"
    enabled: yes
    exclude: "kubelet kubeadm kubectl cri-tools kubernetes-cni"
  when: 
    - k8s_detected_package_manager == "yum"
    - not k8s_repo_configured

# apt 저장소 설정 (선택된 repo 사용)
- name: "Kubernetes GPG 키 추가"
  get_url:
    url: "{{ k8s_selected_repo_config.yum.gpg_key if k8s_use_official_repo | default(false) else 'https://packages.cloud.google.com/apt/doc/apt-key.gpg' }}"
    dest: "{{ k8s_selected_repo_config.apt.keyring_path }}"
    mode: '0644'
  when: 
    - k8s_detected_package_manager == "apt"
    - not k8s_repo_configured

- name: "Kubernetes apt 저장소 설정"
  apt_repository:
    repo: "deb [signed-by={{ k8s_selected_repo_config.apt.keyring_path }}] {{ k8s_selected_repo_config.apt.repo_url }} {{ 'kubernetes-xenial' if not k8s_use_official_repo | default(false) else '' }} main"
    state: present
    filename: kubernetes
  when: 
    - k8s_detected_package_manager == "apt"
    - not k8s_repo_configured

# 패키지 언홀드 (apt)
- name: "패키지 언홀드 (apt)"
  command: "apt-mark unhold {{ item }}"
  loop: "{{ k8s_package_base_names }}"
  when: 
    - k8s_detected_package_manager == "apt"
    - k8s_package_hold
  ignore_errors: true

# 여러 패치 버전을 순서대로 시도하는 로직
- name: "사용 가능한 패치 버전으로 패키지 설치 시도"
  include_tasks: try_install_version.yml
  loop: "{{ k8s_available_patches | default([]) }}"
  loop_control:
    loop_var: patch_version
  when: 
    - k8s_available_patches | default([]) | length > 0
    - k8s_package_install_success is not defined

# 모든 패치 버전 실패 시 경고
- name: "모든 패치 버전 설치 실패 경고"
  fail:
    msg: 
      - "❌ 모든 사용 가능한 패치 버전에 대한 패키지 설치가 실패했습니다."
      - "  시도한 버전: {{ k8s_available_patches | default([]) | join(', ') }}"
      - "  패키지: {{ k8s_package_base_names | join(', ') }}"
      - "  저장소 설정을 확인하거나 다른 설치 방법을 시도해보세요."
  when: 
    - k8s_available_patches | default([]) | length > 0
    - k8s_package_install_success is not defined

# 패키지 홀드 (apt)
- name: "패키지 홀드 (apt)"
  command: "apt-mark hold {{ item }}"
  loop: "{{ k8s_package_base_names }}"
  when: 
    - k8s_detected_package_manager == "apt"
    - k8s_package_hold
    - k8s_package_install_success is defined

# 설치된 버전 확인
- name: "설치된 패키지 버전 확인 (yum)"
  shell: "yum list installed | grep {{ item }}"
  register: yum_installed_versions
  loop: "{{ k8s_package_base_names }}"
  when: 
    - k8s_detected_package_manager == "yum"
    - k8s_package_install_success is defined
  changed_when: false

- name: "설치된 패키지 버전 확인 (apt)"
  shell: "dpkg -l | grep {{ item }}"
  register: apt_installed_versions
  loop: "{{ k8s_package_base_names }}"
  when: 
    - k8s_detected_package_manager == "apt"
    - k8s_package_install_success is defined
  changed_when: false

- name: "설치된 패키지 버전 표시 (yum)"
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ yum_installed_versions.results }}"
  when: 
    - k8s_detected_package_manager == "yum"
    - yum_installed_versions is defined
  loop_control:
    label: "{{ item.item }}"

- name: "설치된 패키지 버전 표시 (apt)"
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ apt_installed_versions.results }}"
  when: 
    - k8s_detected_package_manager == "apt"
    - apt_installed_versions is defined
  loop_control:
    label: "{{ item.item }}"

- name: "Fallback 패키지 설치 완료"
  debug:
    msg: 
      - "✅ Fallback 패키지 설치가 완료되었습니다."
      - "  성공한 버전: {{ k8s_successful_version | default('N/A') }}"
  when: k8s_package_install_success is defined 