---
# 바이너리 설치

- name: "바이너리 설치 시작"
  debug:
    msg: "바이너리 설치를 시작합니다: {{ k8s_binaries_to_install | join(', ') }}"

- name: "임시 다운로드 디렉토리 생성"
  tempfile:
    state: directory
    suffix: "_k8s_download"
  register: temp_download_dir

# 바이너리 다운로드
- name: "Kubernetes 바이너리 다운로드"
  get_url:
    url: "{{ k8s_binary_base_url }}/{{ k8s_target_version }}/bin/linux/amd64/{{ item }}"
    dest: "{{ temp_download_dir.path }}/{{ item }}"
    mode: '0755'
    timeout: 300
  loop: "{{ k8s_binaries_to_install }}"
  register: binary_download_result

- name: "다운로드 결과 확인"
  debug:
    msg: "{{ item.item }} 다운로드 {{ '성공' if item.status_code == 200 else '실패' }}"
  loop: "{{ binary_download_result.results }}"
  loop_control:
    label: "{{ item.item }}"

# 체크섬 검증 (선택사항)
- name: "바이너리 체크섬 다운로드"
  get_url:
    url: "{{ k8s_binary_base_url }}/{{ k8s_target_version }}/bin/linux/amd64/{{ item }}.sha256"
    dest: "{{ temp_download_dir.path }}/{{ item }}.sha256"
    timeout: 60
  loop: "{{ k8s_binaries_to_install }}"
  register: checksum_download_result
  ignore_errors: true

- name: "바이너리 체크섬 검증"
  shell: |
    cd {{ temp_download_dir.path }}
    if [ -f {{ item }}.sha256 ]; then
      echo "$(cat {{ item }}.sha256)  {{ item }}" | sha256sum -c
    else
      echo "체크섬 파일이 없습니다: {{ item }}.sha256"
      exit 1
    fi
  loop: "{{ k8s_binaries_to_install }}"
  register: checksum_verify_result
  when: not k8s_skip_certificate_verification
  ignore_errors: true

- name: "체크섬 검증 결과"
  debug:
    msg: "{{ item.item }} 체크섬 검증 {{ '성공' if item.rc == 0 else '실패' }}"
  loop: "{{ checksum_verify_result.results }}"
  when: 
    - checksum_verify_result is defined
    - not k8s_skip_certificate_verification
  loop_control:
    label: "{{ item.item }}"

# 기존 바이너리 백업
- name: "기존 바이너리 백업"
  copy:
    src: "{{ k8s_bin_dir }}/{{ item }}"
    dest: "{{ k8s_bin_dir }}/{{ item }}.backup.{{ ansible_date_time.epoch }}"
    remote_src: true
    mode: '0755'
  loop: "{{ k8s_binaries_to_install }}"
  ignore_errors: true

# 새 바이너리 설치
- name: "새 바이너리 설치"
  copy:
    src: "{{ temp_download_dir.path }}/{{ item }}"
    dest: "{{ k8s_bin_dir }}/{{ item }}"
    remote_src: true
    mode: '0755'
    owner: root
    group: root
  loop: "{{ k8s_binaries_to_install }}"

# systemd 서비스 파일 업데이트 (필요한 경우)
- name: "kubelet systemd 서비스 파일 다운로드"
  get_url:
    url: "{{ k8s_systemd_files.kubelet_service }}"
    dest: "/tmp/kubelet.service"
    timeout: 60
  when: "'kubelet' in k8s_binaries_to_install"

- name: "kubelet systemd 서비스 파일 업데이트"
  template:
    src: "/tmp/kubelet.service"
    dest: "/etc/systemd/system/kubelet.service"
    backup: yes
  vars:
    k8s_bin_path: "{{ k8s_bin_dir }}"
  when: "'kubelet' in k8s_binaries_to_install"
  notify:
    - reload systemd
    - restart kubelet

- name: "kubeadm 설정 파일 다운로드"
  get_url:
    url: "{{ k8s_systemd_files.kubeadm_conf }}"
    dest: "/tmp/10-kubeadm.conf"
    timeout: 60
  when: "'kubelet' in k8s_binaries_to_install"

- name: "kubeadm 설정 파일 업데이트"
  template:
    src: "/tmp/10-kubeadm.conf"
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    backup: yes
  vars:
    k8s_bin_path: "{{ k8s_bin_dir }}"
  when: "'kubelet' in k8s_binaries_to_install"
  notify:
    - reload systemd
    - restart kubelet

# 설치된 버전 확인
- name: "설치된 바이너리 버전 확인"
  command: "{{ k8s_bin_dir }}/{{ item }} --version"
  register: binary_versions
  loop: "{{ k8s_binaries_to_install }}"
  changed_when: false

- name: "설치된 버전 표시"
  debug:
    msg: "{{ item.item }}: {{ item.stdout }}"
  loop: "{{ binary_versions.results }}"
  loop_control:
    label: "{{ item.item }}"

# 임시 파일 정리
- name: "임시 다운로드 디렉토리 정리"
  file:
    path: "{{ temp_download_dir.path }}"
    state: absent

- name: "바이너리 설치 완료"
  debug:
    msg: "바이너리 설치가 완료되었습니다." 