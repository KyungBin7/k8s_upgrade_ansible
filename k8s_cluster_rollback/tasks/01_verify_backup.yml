---
# 백업 검증 및 사전 검사

- name: "백업 디렉토리 존재 확인"
  stat:
    path: "{{ k8s_backup_source_dir }}"
  register: backup_dir_stat
  failed_when: not backup_dir_stat.stat.exists
  
- name: "백업 디렉토리 정보 표시"
  debug:
    msg: 
      - "백업 디렉토리: {{ k8s_backup_source_dir }}"
      - "백업 존재: {{ backup_dir_stat.stat.exists }}"
      - "생성 시간: {{ backup_dir_stat.stat.ctime | default('N/A') }}"

# 백업 메타데이터 파일 확인
- name: "백업 메타데이터 파일 확인"
  stat:
    path: "{{ k8s_rollback_files.backup_info }}"
  register: backup_info_stat

- name: "백업 메타데이터 읽기"
  slurp:
    path: "{{ k8s_rollback_files.backup_info }}"
  register: backup_metadata
  when: backup_info_stat.stat.exists

- name: "백업 메타데이터 표시"
  debug:
    msg: "{{ backup_metadata.content | b64decode | split('\n') }}"
  when: backup_info_stat.stat.exists

# 필수 백업 파일들 존재 확인
- name: "필수 백업 파일 존재 확인"
  stat:
    path: "{{ item }}"
  register: backup_files_check
  loop:
    - "{{ k8s_rollback_files.backup_info }}"
    - "{{ k8s_rollback_files.binaries_dir }}"
    - "{{ k8s_rollback_files.systemd_dir }}"
  loop_control:
    label: "{{ item | basename }}"

- name: "백업 파일 상태 표시"
  debug:
    msg: "{{ item.item | basename }}: {{ '존재' if item.stat.exists else '없음' }}"
  loop: "{{ backup_files_check.results }}"
  loop_control:
    label: "{{ item.item | basename }}"

# etcd 스냅샷 확인 (마스터 노드용)
- name: "etcd 스냅샷 파일 확인"
  stat:
    path: "{{ k8s_rollback_files.etcd_snapshot }}"
  register: etcd_snapshot_stat
  when: k8s_rollback_mode in ["full", "etcd-only"]

- name: "etcd 스냅샷 정보 표시"
  debug:
    msg: 
      - "etcd 스냅샷: {{ k8s_rollback_files.etcd_snapshot }}"
      - "존재: {{ etcd_snapshot_stat.stat.exists | default('N/A') }}"
      - "크기: {{ etcd_snapshot_stat.stat.size | default('N/A') }} bytes"
  when: k8s_rollback_mode in ["full", "etcd-only"]

# 설정 파일 아카이브 확인
- name: "설정 파일 아카이브 확인"
  stat:
    path: "{{ item }}"
  register: config_archives_stat
  loop:
    - "{{ k8s_rollback_files.config_archive }}"
    - "{{ k8s_rollback_files.etcd_archive }}"
    - "{{ k8s_rollback_files.kubelet_archive }}"
  loop_control:
    label: "{{ item | basename }}"
  when: k8s_rollback_mode in ["full", "config-only"]

- name: "설정 파일 아카이브 상태 표시"
  debug:
    msg: "{{ item.item | basename }}: {{ '존재' if item.stat.exists else '없음' }} ({{ item.stat.size | default(0) }} bytes)"
  loop: "{{ config_archives_stat.results }}"
  loop_control:
    label: "{{ item.item | basename }}"
  when: 
    - k8s_rollback_mode in ["full", "config-only"]
    - config_archives_stat is defined

# 바이너리 파일 확인
- name: "백업된 바이너리 파일 확인"
  find:
    paths: "{{ k8s_rollback_files.binaries_dir }}"
    patterns: "{{ k8s_backup_binaries }}"
  register: backup_binaries_found
  when: k8s_rollback_mode in ["full", "binary-only"]

- name: "백업된 바이너리 목록 표시"
  debug:
    msg: "발견된 바이너리: {{ backup_binaries_found.files | map(attribute='path') | map('basename') | list }}"
  when: 
    - k8s_rollback_mode in ["full", "binary-only"]
    - backup_binaries_found is defined

# 현재 클러스터 상태 확인
- name: "현재 클러스터 접근 가능 여부 확인"
  shell: kubectl cluster-info
  register: current_cluster_status
  ignore_errors: true
  changed_when: false

- name: "현재 클러스터 상태 표시"
  debug:
    msg: 
      - "클러스터 상태: {{ '접근 가능' if current_cluster_status.rc == 0 else '접근 불가' }}"
      - "상태 정보: {{ current_cluster_status.stdout_lines | default(['N/A']) }}"

# 현재 노드 상태 확인
- name: "현재 노드 상태 확인"
  shell: kubectl get nodes
  register: current_nodes_status
  ignore_errors: true
  changed_when: false
  when: current_cluster_status.rc == 0

- name: "현재 노드 목록 표시"
  debug:
    msg: "{{ current_nodes_status.stdout_lines }}"
  when: 
    - current_cluster_status.rc == 0
    - current_nodes_status is defined
    - current_nodes_status.rc == 0

# 디스크 공간 확인
- name: "디스크 공간 확인"
  shell: df -h {{ item }}
  register: disk_space_check
  loop:
    - "{{ k8s_backup_source_dir }}"
    - "{{ k8s_config_dir }}"
    - "{{ k8s_etcd_data_dir }}"
    - "/tmp"
  ignore_errors: true
  changed_when: false

- name: "디스크 공간 표시"
  debug:
    msg: "{{ item.stdout_lines }}"
  loop: "{{ disk_space_check.results }}"
  when: item.rc == 0
  loop_control:
    label: "{{ item.item }}"

# 백업 무결성 검증 (옵션)
- name: "아카이브 파일 무결성 검증"
  shell: "tar -tf {{ item }} > /dev/null"
  register: archive_integrity
  loop:
    - "{{ k8s_rollback_files.config_archive }}"
    - "{{ k8s_rollback_files.etcd_archive }}"
    - "{{ k8s_rollback_files.kubelet_archive }}"
  ignore_errors: true
  changed_when: false
  when: k8s_rollback_mode in ["full", "config-only"]

- name: "아카이브 무결성 결과 표시"
  debug:
    msg: "{{ item.item | basename }}: {{ '정상' if item.rc == 0 else '손상됨' }}"
  loop: "{{ archive_integrity.results }}"
  when: 
    - k8s_rollback_mode in ["full", "config-only"]
    - archive_integrity is defined
  loop_control:
    label: "{{ item.item | basename }}"

# 사전 검사 완료
- name: "백업 검증 완료"
  debug:
    msg:
      - "=== 백업 검증 완료 ==="
      - "백업 위치: {{ k8s_backup_source_dir }}"
      - "백업 무결성: 확인됨"
      - "롤백 준비: 완료"

# 확인 프롬프트 (대화형 모드)
- name: "롤백 진행 확인"
  pause:
    prompt: |
      
      === 롤백 확인 ===
      백업 타임스탬프: {{ k8s_backup_timestamp }}
      롤백 모드: {{ k8s_rollback_mode }}
      대상 호스트: {{ inventory_hostname }}
      
      계속 진행하시겠습니까? [y/N]
  register: rollback_confirmation
  when: 
    - k8s_require_confirmation | default(true)
    - not k8s_dry_run | default(false)

- name: "롤백 취소"
  fail:
    msg: "사용자가 롤백을 취소했습니다."
  when: 
    - k8s_require_confirmation | default(true)
    - rollback_confirmation is defined
    - rollback_confirmation.user_input | lower not in ['y', 'yes']

- name: "드라이런 모드 알림"
  debug:
    msg: 
      - "=== 드라이런 모드 활성화 ==="
      - "실제 롤백은 수행되지 않습니다."
      - "계획만 표시됩니다."
  when: k8s_dry_run | default(false) 